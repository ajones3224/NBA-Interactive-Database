    For my conference I decided to combine my interest in the NBA would and my desire to learn how to use python. So I decided to use two types of NBA databases. In one of the NBA databases, it had seasonal stats for every player in the NBA from 1950-2017. The other database was the players' boxscore from games held in the 2016-2017.  The seasonal stats database kept track of how many total points, assists, rebounds, field goal percentage, etc for a player in every season they played.  It allowed for some very interesting queries to be made. The player boxscore kept track of a player stats game by game in the 2016-2017 season and also kept track of what time won each game or loss.
    For the majority of the conference project, I worked in season stats database because it had more information and I could write more interesting queries using that one. I used the player boxscore database every now and then but I didn’t like it because it was very difficult to get interesting information out of it. However, if I had more time I feel like I could write more interesting queries with the player box score database. But I will talk about it later in the file what I could have done with more time. 
    When running my python code you will see there are 14 options to choose from. The first option is the Elite scores function. It returns the names of the player who total career points are above the number entered, in no set order and the seasonal stats database was used. I would recommend entering a number greater than 15,000 or the program will take forever and print out a lot of names. This is a very basic query but it was the first one I wrote and it was the first thing that came to my mind because I saw an ESPN article talking about total career points of players. The second option was theclub and that found all the players who have shot 50 percent from the field, 40 percent from three and 90 percent from the free throw line using the seasonal stats database. The third option AveragePoints finds a career average of points of the player name entered using the seasonal stats database. The only catch is you have to add the %sign after each name because the Hall of Famers has an * after their name. So I had to use the like option in sqlite when writing my query. The fourth option findteammates finds all the members from a team during the year entered using the seasonal stats database. When entering the team name you have to use their three-letter abbreviation because that is what the use in the database. The fifth option finds the player who has had a triple-double in a game during the 2016-2017 season using the player boxscore database. It returns the name of the player and the team it was done against. Options 6 through 6-9 are very similar and return the top 10 scorers, assists, rebounds, and steals all using the seasonal database. Each one category returns the players name in order and the total amount for that category. Option 10 returns a players average points scored in the 2016-2017 using the player boxscore database. Option 11 returns the season high points, the team it was against and the day of the game of the player entered. This used the player boxscore database.  Option 12 used both databases and it found the player who scored 50 points during a game during the 2016-2017 season and has a career average above 20 points. The last option is a product query that finds the group of players who scored 40 points against each other in the same game. 
    Now some of the problems I had with the database was mentioned earlier about the * being behind the names of Hall of Famers. For example, this was Micheal Jordan* name in the database. It was a headache to deal with because of whenever I searched for his name it wouldn’t pop up. It also took me forever to figure out why the * was there. Another problem with the database is when a player was traded it would combine its stats from both teams in a whole another row. Making some of the data inaccurate.  I also had a time dealing with sets in python because I didn't know many of the methods for sets. I also had trouble writing some complicated queries and combining some of my ideas with my limited python knowledge.  An example of the complicated queries find the list of player who has been traded more than 5 times or top 10 list of players double-double they have had in their careers. A complicated idea I had was to write a query that gets a whole team, which I successfully did do but the complicated part was the user would choose a players name on that team and all the stats would pop up from that season. 
	If I had more time I would have made more queries involving the player boxscore database. I would have written a query that got you the record of the team during that season and it would be able to tell if a team made the playoffs or not. I would also write a query that got you the top 10 of the points, assists, steals, and rebounds for that season. I could have done more with the seasonal database find the worst free throw shooter for each season in NBA history. Lastly, I didn’t make my code as robust as I would like. I try to catch some errors so that it would print out a message. But when trying to catch them it missed up my code and made it not runnable. So I decided to submit my conference project because I put a lot of hard work into it and had fun doing it. Overall it was a fun experience and I know how to see how they find all these weird stats randomly during an NBA game. 